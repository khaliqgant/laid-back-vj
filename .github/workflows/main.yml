name: Docker Build & Publish, ECS Deploy

on:
  push:
    branches: [ github-actions ]
  pull_request:
    branches: [ github-actions ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - uses: marocchino/setup-ecs-cli@v1
      with:
        version: "v1.18.0"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: nginx
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./provision/node/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: node
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./provision/nginx/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to ecs using the cli
      env:
        CLUSTER: lbv-cluster
        SERVICE: lbv-service
        LB: lbv-elb
        IMAGE: nginx
        ECR_REPO: ${{ secrets.ECR_REPO }}
        LASTFM_KEY: ${{ secrets.LASTFM_KEY }}
        LASTFM_SECRET: ${{ secrets.LASTFM_SECRET }}
        YOUTUBE_KEY: ${{ secrets.YOUTUBE_KEY }}
        ROLLBAR_KEY: ${{ secrets.ROLLBAR_KEY }}
        SPOTIFY_KEY: ${{ secrets.SPOTIFY_KEY }}
        SPOTIFY_SECRET: ${{ secrets.SPOTIFY_SECRET }}
        SPOTIFY_CALLBACK_URL: ${{ secrets.SPOTIFY_CALLBACK_URL }}
      run: |
          ecs-cli compose \
            --file ./docker-compose.prod.yml \
            --project-name ${SERVICE} \
            --cluster ${CLUSTER} \
            --verbose service up \
            --container-name ${IMAGE} \
            --container-port 80 \
            --load-balancer-name ${LB} \
            --deployment-min-healthy-percent 0 \
            --timeout 10

